openapi: 3.1.0
info:
  title: Bill Tracka Api Documention
  description: |
    # Bill Tracka
      Api to issue and handle invoices
  version: 1.0.0


servers:
  - url: 'https://billtracka.jojothomas.tech/api'
    description: Online server
  - url: 'http://localhost:5000/api'
    description: Local server


tags:
  - name: Authentication
    description: "Every thing related to signup, login, and verifying user"
  - name: User
    description: "Every thing related to users"
  - name: Invoice
    description: "Every thing related to invoices"
  - name: Item
    description: "Every thing related to items"


# Endpoints
paths:

  #  auth routes starts here
  /auth/signup:
    post:
      tags:
        - Authentication
      description: "create a user now"
      requestBody:
        $ref: '#/components/requestBodies/CreateUser'
      responses:
        201:
          description: "Successfully creates user"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:

                  status:
                    type: number
                    example: 401,
                  message:
                    type: string
                    example: "Email already exists"

  /auth/verify:
    put:
      tags:
        - Authentication
      parameters:
        - name: code
          description: verification code gotten by emaail
          required: true
          in: query
          schema:
            type: string
        - name: id
          description: user id to verify
          required: true
          in: query
          schema:
            type: string


      responses:
        200:
          $ref: "#/components/responses/verificationSuccessful"

        400:
          content:
            application/json:
              examples:
                missing code query:
                  value:
                    status: 400
                    message: "verification code required"

                missing id in query:
                  value:
                    status: 400
                    message: "user id required"


  /auth/login:
    post:
      tags:
        - Authentication
      description: "Login a user"
      requestBody:
        $ref: '#/components/requestBodies/LoginUser'
      responses:
        200:
          $ref: '#/components/responses/loginResponse'
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: "sends a password reset mail containing the password reset code"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
            examples:
              registered email:
                value:
                  email: "example@gmail.com"

      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericResponse'

              examples:
                valid registered email:
                  value:
                    status: 200
                    message: 'Password reset mail sent successfully'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericResponse'
              examples:
                invalid or unregisted email:
                  value:
                    status: 400
                    message: "User not found"

                failed to send email in payload:
                  value:
                    status: 400
                    message: "Email required"

  /auth/reset-password:

    put:
      tags:
        - Authentication
      description: "Change user password using code send with reset mail as a means of authorization"

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'example@mail.com'
                code:
                  type: integer
                  example: 1234
                password:
                  type: string
                  example: 'Superpassword123'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericResponse'

              example:
                status: 201
                message: 'Password reset successfully'

        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericResponse'

              examples:
                payload missing code:
                  value:
                    status: 400
                    message: 'Password reset code is required'
                payload missing password:
                  value:
                    status: 400
                    message: 'password is required'

                payload missing email:
                  value:
                    status: 400
                    message: 'Email is required'
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericResponse'
              example:
                status: 401
                message: 'Code is incorrect or not longer valid'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericResponse'

              example:
                status: 404
                message: 'User not found'



  #  invoice routes starts here

  /invoice:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Invoice
      description: "Get all invoice associated with logged in user"
      responses:
        200:
          $ref: "#/components/responses/multipleInvoices"
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Invoice
      requestBody:
        $ref: "#/components/requestBodies/createInvoice"
      responses:
        201:
          $ref: "#/components/responses/createSingleInvoice"

  /invoice/{invoice_id}:
    get:
      tags:
        - Invoice
      description: "Get a single invoice"
      parameters:
        - name: invoice_id
          in: path
          required: true
          description: "The invoice id"

      responses:
        200:
          $ref: '#/components/responses/getSingleInvoice'

        404:
          description: "Invoice not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/genericResponse"
              examples:
                invoice not found:
                  value:
                    status: 404
                    message: "Invoice not found"
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Invoice
      description: "Update a single invoice"
      parameters:
        - name: invoice_id
          in: path
          required: true
          description: "The invoice id"
      requestBody:
        $ref: "#/components/requestBodies/createInvoice"

      responses:
        201:
          $ref: '#/components/responses/createSingleItem'

        404:
          description: "Invoice not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/genericResponse"
              examples:
                invoice not found:
                  value:
                    status: 404
                    message: "Invoice not found"
    delete:

      tags:
        - Invoice
      security:
        - bearerAuth: [ ]
      description: "Delete a single invoice"
      parameters:
        - name: invoice_id
          in: path
          required: true
          description: "The invoice id"
      responses:
        204:
          description: Invoice deleted successfully

    #item routes starts here
  /item:
    get:
      tags:
        - Item
      security:
        - bearerAuth: [ ]
      description: "Get all items associated with logged in user"
      responses:
        200:
          $ref: "#/components/responses/multipleItem"
    post:
      tags:
        - Item
      security:
        - bearerAuth: [ ]
      description: "Create a new item"

      requestBody:
        $ref: "#/components/requestBodies/createItem"
      responses:
        201:
          description: "Item created successfully"
          $ref: "#/components/responses/createSingleItem"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/genericResponse"
              examples:
                missing item name:
                  value:
                    status: 400
                    message: "Item name is required"
                missing unit price:
                  value:
                    status: 400
                    message: "Unit price is required"
                missing quantity:
                  value:
                    status: 400
                    message: "Quantity is required"

  /item/{item_id}:
    get:
      tags:
        - Item
      description: "Get a single item"
      parameters:
        - name: item_id
          in: path
          required: true
          description: "The item id"
          schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/getSingleItem'
        404:
          description: "Item not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/genericResponse"
              examples:
                item not found:
                  value:
                    status: 404
                    message: "Item not found"

    put:
      tags:
        - Item
      description: "Update a single item"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: item_id
          in: path
          required: true
          description: "The item id"
          schema:
          type: string
      requestBody:
        $ref: "#/components/requestBodies/createItem"
      responses:
        200:
          $ref: '#/components/responses/getSingleItem'
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/genericResponse"
              examples:
                missing item name:
                  value:
                    status: 400
                    message: "Item name is required"
                missing unit price:
                  value:
                    status: 400
                    message: "Unit price is required"
                missing quantity:
                  value:
                    status: 400
                    message: "Quantity is required"

    delete:
      tags:
        - Item
      description: "Delete a single item"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: item_id
          in: path
          required: true
          description: "The item id"
          schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example:
                status: 200
                message: 'Item deleted successfully'
        404:
          description: "Item not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/genericResponse"
              examples:
                item not found:
                  value:
                    status: 404
                    message: "Item not found"

# TODO: add user routes
#  # user routes starts here
#  /users/{id}:
#    get:
#      tags:
#        - User
#      description: "Get a single user"
#      parameters:
#        - name: id
#          in: path
#          required: true
#          description: "The user id"
#          schema:
#          type: string
#      responses:
#        200:
#          description: "User data"
#          content:
#            application/json:
#              schema:
#                properties:
#                  status:
#                    type: integer
#                    example: 200
#                  user:
#                    $ref: "#/components/schemas/User"
#        404:
#          description: "User not found"
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/genericResponse"
#              examples:
#                user not found:
#                  value:
#                    status: 404
#                    message: "User not found"
#
#    put:
#      tags:
#        - User
#      description: "Update a single user"
#      security:
#        - bearerAuth: [ ]
#      parameters:
#        - name: id
#          in: path
#          required: true
#          description: "The user id"
#          schema:
#          type: string
#      requestBody:
#        $ref: "#/components/requestBodies/CreateUser"
#      responses:
#        200:
#          description: "User data"
#          content:
#            application/json:
#              schema:
#                properties:
#                  status:
#                    type: integer
#                    example: 200
#                  user:
#                    $ref: "#/components/schemas/User"
#        404:
#          description: "User not found"
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/genericResponse"
#              examples:
#                user not found:
#                  value:
#                    status: 404
#                    message: "User not found"
#
#    delete:
#      tags:
#        - User
#      description: "Delete a single user"
#      security:
#        - bearerAuth: [ ]
#      parameters:
#        - name: id
#          in: path
#          required: true
#          description: "The user id"
#
#      responses:
#        200:
#          content:
#            application/json:
#              example:
#                status: 200
#                message: 'User deleted successfully'
#        404:
#          description: "User not found"
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/genericResponse"
#              examples:
#                user not found:
#                  value:
#                    status: 404
#                    message: "User not found"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT



  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          example: "example@gmail.com"
        password:
          type: string
          example: "password123"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        businessName:
          type: string
          example: "BillTracka Enterprises"
      xml:
        name: "user"

    LoginSchema:
      required: true
      type: object
      properties:
        email:
          type: string
          example: "example@mail.com"
        password:
          type: string
          example: "password123"


    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: "User signed in successfully"
        user:
          type: object
          properties:
            id:
              type: string
              example: "uuid"
            firstName:
              type: string
              example: "John"
            lastName:
              type: string
              example: "Doe"
            email:
              type: string
              example: ""
            phone:
              type: string
              example: ""
            isVerified:
              type: boolean
              example: true
            verificationToken:
              type: string
              example: ""
            businessName:
              type: string
              example: ""
            created_at:
              type: string
              example: "2023-11-27T22:23:31.318Z"
        token:
          type: string
          example: "accessToken"
        refreshToken:
          type: string
          example: "refreshToken"

    basicInvoice:
      type: object
      properties:
        issueDate:
          type: string
          example: "2021-11-27T21:03:49.294Z"
        dueDate:
          type: string
          example: "2021-11-27T21:03:49.294Z"
        notes:
          type: string
          example: "This is a sample invoice"
        paymentMode:
          type: string
          example: "Bank Transfer"
        clientName:
          type: string
          example: "Water and beans"
        clientEmail:
          type: string
          example: "example@gmail.com"
        clientPhone:
          type: string
          example: "0901234567"
        clientAddress:
          type: string
          example: "ya nuts"
        clientState:
          type: string
          example: "Kyoto"
        clientCity:
          type: string
          example: "Jaku"
        clientCountry:
          type: string
          example: "Japan"
        clientLga:
          type: string
          example: "shigaraki"
        status:
          type: string
          default: "UNPAID"
          enum:
            - UNPAID
            - PAID
            - PARTIALLY_PAID
        total:
          type: number
          example: 36000
        discount:
          type: number
          example: 0
        amountPaid:
          type: number
          example: 26000
        amountDue:
          type: number
          example: 49000




    invoice:
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: "f7b1126d-e0a2-45b1-a197-f3904f847199"
            invoiceNumber:
              type: string
              example: "12345678"


        - $ref: "#/components/schemas/basicInvoice"

    reqInvoice:
      allOf:
        - $ref: '#/components/schemas/basicInvoice'
        - type: object
          properties:
            items:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: 'example-uuid4'
                  quantity:
                    type: number
                    example: 10
    resInvoice:
      allOf:
        - $ref: '#/components/schemas/basicInvoice'
        - type: object
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/resItem'
                  - type: object
                    properties:
                      ownerId:
                        type: string
                        example: "359d4824-2adc-4b52-a5e0-d6620a90dad0"
                      refId:
                        type: string
                        example: "exfbfp1zwn"
                      paymentLink:
                        type: string
                        example: "https://billtracka.jojothomas.tech/api/invoice/exfbfp1zwn/pay"
                      created_at:
                        type: string
                        example: "2021-11-27T21:03:49.294Z"
                      invoiceItem:
                        $ref: '#/components/schemas/invoiceItem'



    basicItem:
      type: object

      properties:

        itemName:
          type: string
          example: 'example item'
        unitPrice:
          type: number
          example: 1000
        quantity:
          type: number
          example: 10
        discount:
          type: number
          example: 0

    item:
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: 'example-uuid4'
        - $ref: '#/components/schemas/basicItem'

    resItem:
      type: object
      allOf:
        - $ref: '#/components/schemas/item'
        - type: object
          properties:
            userId:
              type: string
              example: 'example-uuid4'

    invoiceItem:
      type: object
      properties:
        invoiceId:
          type: string
        itemId:
          type: string
        quantity:
          type: number
          example: 10




    genericResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string


  requestBodies:
    CreateUser:
      required: true
      description: "User to be created"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'



    LoginUser:
      required: true
      description: "User to be logged in"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginSchema'

    createInvoice:

      description: "Create New invoice associated with logged in user business"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/reqInvoice"


    # item

    createItem:
      description: "Create New item associated with logged in user business"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/basicItem"

  responses:
    loginResponse:
      description: "User logged in successfully"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginResponse'

    verificationSuccessful:
      description: "User has be successfully verified with the verification token sent via email"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 200
              message:
                type: string
                example: "user verified successfully"


    getSingleInvoice:
      description: "invoice data with all items associated with it."
      content:
        application/json:
          schema:
            properties:
              status:
                type: integer
                example: 200
              invoice:
                $ref: "#/components/schemas/resInvoice"

    createSingleInvoice:
      description: "invoice data with all items associated with it."
      content:
        application/json:
          schema:
            properties:
              status:
                type: integer
                example: 201
              invoice:
                $ref: "#/components/schemas/resInvoice"


    multipleInvoices:
      description: "Array of invoice associated with the logged in user"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/resInvoice"

    createSingleItem:
      description: "item data"
      content:
        application/json:
          schema:
            properties:
              status:
                type: integer
                example: 201
              data:
                $ref: "#/components/schemas/item"
    getSingleItem:
      description: "item data"
      content:
        application/json:
          schema:
            properties:
              status:
                type: integer
                example: 200
              data:
                $ref: "#/components/schemas/item"

    multipleItem:
      description: "Array of items associated with the logged in user"
      content:
        application/json:
          schema:
            properties:
              type: array
              items:
                $ref: "#/components/schemas/resItem"










